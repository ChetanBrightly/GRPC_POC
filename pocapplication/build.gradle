plugins {
    id 'java'
    id 'io.quarkus' version '3.16.0.CR1'
    id 'org.liquibase.gradle' version '2.2.0'
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation 'io.quarkus:quarkus-grpc'
    implementation 'io.quarkus:quarkus-hibernate-orm-panache'
    implementation 'io.quarkus:quarkus-jdbc-postgresql'
    implementation 'io.quarkus:quarkus-arc'
    implementation 'io.quarkus:quarkus-hibernate-orm'
    testImplementation 'io.quarkus:quarkus-junit5'

    implementation 'io.quarkus:quarkus-hibernate-orm-panache'

    // Liquibase Configuration
    implementation 'io.quarkus:quarkus-liquibase'
    liquibaseRuntime 'org.liquibase:liquibase-core:4.23.0'
    liquibaseRuntime 'org.liquibase:liquibase-groovy-dsl:3.0.3'
    liquibaseRuntime 'org.liquibase.ext:liquibase-hibernate5:4.22.0'
    liquibaseRuntime "org.postgresql:postgresql"
    implementation 'io.quarkus:quarkus-arc'
}

group 'com.chetan'
version '1.0.0-SNAPSHOT'

ext.liquibaseProps = new Properties()
InputStream is = new FileInputStream("${quarkusLiquibaseProperties}")
liquibaseProps.load(is)

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

test {
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}


compileTestJava {
    options.encoding = 'UTF-8'
}

liquibase {
    activities {
        main {
            changelogFile liquibaseProps['liquibase.input.change-log']
            url liquibaseProps['liquibase.datasource.url']
            username liquibaseProps['liquibase.datasource.username']
            password liquibaseProps['liquibase.datasource.password']
            defaultSchemaName liquibaseProps['quarkus.liquibase.default-schema-name']
            schemas liquibaseProps['quarkus.liquibase.default-schema-name']
            driver liquibaseProps['liquibase.datasource.driver']
        }
    }
    runList = 'main'
}

configurations {
    liquibaseRuntime {
        sourceSets.getByName("main").compileClasspath
        sourceSets.getByName("main").output
        extendsFrom implementation
    }
}

processResources {
    from('src/main/resources')
    include '**/*'
    duplicatesStrategy = 'exclude'
}

/********************************************************/
/*              CHECK STYLE CONFIGURATION               */
/********************************************************/
//
//def configDir = "${project.rootDir}/config"
//checkstyle {
//    toolVersion '8.36.1'
//    configFile file("$configDir/checkstyle/checkstyle.xml")
//    checkstyleTest.enabled = false
//}
//checkstyleMain {
//    source = 'src/main'
//}
//quarkusBuild.dependsOn checkstyleMain
